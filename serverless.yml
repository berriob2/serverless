org: webapps
app: converter-dev
service: serverless-converter

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'mx-central-1'}
  memorySize: 2048
  timeout: 29
  ephemeralStorageSize: 1024 # Added for video conversions
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_BUCKET_NAME: ${self:custom.bucketName}
    TMP_DIR: /tmp
    JOBS_TABLE_NAME: ${self:service}-${self:provider.stage}-jobs
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource: arn:aws:s3:::${self:custom.bucketName}/*
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:*:*:*
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
          Resource: arn:aws:dynamodb:*:*:table/${self:service}-${self:provider.stage}-jobs
        - Effect: Allow
          Action: ssm:GetParameter
          Resource: arn:aws:ssm:*:*:parameter/serverless-converter/*

custom:
  bucketName: ${self:service}-${self:provider.stage}-uploads
  authorizers:
    apiAuthorizer:
      type: token
      identitySource: method.request.header.Authorization

functions:
  apiAuthorizer:
    handler: functions/apiAuthorizer.handler
    environment:
      JWT_SECRET: ${env:JWT_SECRET, ''}
    events:
      - http:
          path: auth
          method: post
          cors: true

  convertHeicToJpg:
    handler: functions/convertHeicToJpg.handler
    events:
      - http:
          path: convert/heic-to-jpg
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  convertImageToPdf:
    handler: functions/convertImageToPdf.handler
    events:
      - http:
          path: convert/image-to-pdf
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  generateVideoUploadUrl: # Renamed from convertVideo
    handler: functions/generateUploadUrl.handler
    timeout: 60 # Increased for reliability
    layers:
      - arn:aws:lambda:mx-central-1:167603795381:layer:FFmpegLayer:1 # Added (though not strictly needed)
    events:
      - http:
          path: convert/video
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  generateVideoToMp3UploadUrl: # Renamed from convertVideoToMp3
    handler: functions/generateUploadUrl.handler
    timeout: 60 # Increased for reliability
    layers:
      - arn:aws:lambda:mx-central-1:167603795381:layer:FFmpegLayer:1 # Added (though not strictly needed)
    events:
      - http:
          path: convert/video-to-mp3
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  extractPdfPages:
    handler: functions/extractPdfPages.handler
    events:
      - http:
          path: convert/extract-pdf-pages
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  removePdfPages:
    handler: functions/removePdfPages.handler
    events:
      - http:
          path: convert/remove-pdf-pages
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  convertPdfToWord:
    handler: functions/convertPdfToWord.handler
    events:
      - http:
          path: convert/pdf-to-word
          method: post
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  download:
    handler: functions/download.handler
    events:
      - http:
          path: download
          method: get
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  progress:
    handler: functions/progress.handler
    events:
      - http:
          path: progress/{jobId}
          method: get
          cors: true
          authorizer:
            name: apiAuthorizer
            type: token

  processHeicToJpg:
    handler: functions/processHeicToJpg.handler
    timeout: 900
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: heic/
            - suffix: .heic

  processImageToPdf:
    handler: functions/processImageToPdf.handler
    timeout: 900
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: images/

  processVideo:
    handler: functions/processVideo.handler
    timeout: 900
    layers:
      - arn:aws:lambda:mx-central-1:167603795381:layer:FFmpegLayer:1
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: videos/

  processVideoToMp3:
    handler: functions/processVideoToMp3.handler
    timeout: 900
    layers:
      - arn:aws:lambda:mx-central-1:167603795381:layer:FFmpegLayer:1
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: video-to-mp3/

  processExtractPdfPages:
    handler: functions/processExtractPdfPages.handler
    timeout: 900
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: pdf/
            - suffix: .pdf

  processRemovePdfPages:
    handler: functions/processRemovePdfPages.handler
    timeout: 900
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: pdf-remove/
            - suffix: .pdf

  processPdfToWord:
    handler: functions/processPdfToWord.handler
    timeout: 900
    layers:
      - arn:aws:lambda:mx-central-1:167603795381:layer:LibreOfficeLayer:1
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: pdf-to-word/
            - suffix: .pdf

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['Content-Type', 'Authorization', 'X-Amz-Date', 'X-Api-Key']
              AllowedMethods: [GET, PUT, POST, DELETE]
              AllowedOrigins: ['http://localhost:3000', 'https://your-production-domain.com']
              MaxAge: 3000
        LifecycleConfiguration:
          Rules:
            - Id: DeleteAfter7Days
              Status: Enabled
              ExpirationInDays: 7
    
    ConversionJobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-jobs
        AttributeDefinitions:
          - AttributeName: jobId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: jobId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: StatusIndex
            KeySchema:
              - AttributeName: status
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true